
$utilities: map-merge(
  $utilities,
  (
    "z-index": (
      class: z-index,
      property: z-index,
      values: (0 1 2 3 4 5 10 20 30 40 50),
    ),
    "bg-opacity": (
      css-var: true,
      css-variable-name: bg-opacity,
      class: bg-opacity,
      values: (1: .01, 5: .05, 10: .1, 20: .2, 25: .25, 30: .3, 40: .4, 50: .5, 60: .6, 70: .7, 75: .75, 80: .8, 90: .9, 95: .95, 99: .99)
    ),
    "overlay-color": (
      css-var: true,
      css-variable-name: overlay-color,
      class: overlay,
      // values: $utilities-bg-colors
      values: $theme-colors
    ),
    "overlay-opacity": (
      css-var: true,
      css-variable-name: overlay-opacity,
      class: overlay,
      values: (1: .01, 5: .05, 10: .1, 20: .2, 25: .25, 30: .3, 40: .4, 50: .5, 60: .6, 70: .7, 75: .75, 80: .8, 90: .9, 95: .95, 99: .99)
    ),
    "opacity": (
      class: opacity,
      property: opacity,
      values: (0: 0, 1: .01, 5: .05, 10: .1, 20: .2, 25: .25, 30: .3, 40: .4, 50: .5, 60: .6, 70: .7, 75: .75, 80: .8, 90: .9, 95: .95, 99: .99)
    ),
    // "start": (
    //   class: start,
    //   property: inset-inline-start,
    //   values: (0: 0, 25: 25%, 50: 50%, 75: 75%, 100: 100%)
    // ),
  )
);

.filter-light {
  filter: var(--filter-light);
}

.filter-dark {
  filter: var(--filter-dark);
}

.filter-body-color {
  filter: var(--filter-body-color);
}

.filter-body-bg {
  filter: var(--filter-body-bg);
}

.filter-primary {
  filter: var(--filter-primary);
}

.flex-center {
  justify-content: center;
  align-items: center;
}

.overlay {
  position: relative;
  --overlay-color: var(--body-bg);
  --overlay-opacity: .75;
}

.overlay > * {
  position: relative;
  z-index: 1;
}

.overlay:after {
  content: '';
  position: absolute;
  top: 0;
  inset-inline-start: 0;
  height: 100%;
  width: 100%;
  background-color: var(--overlay-color);
  opacity: var(--overlay-opacity);
  z-index: 0;
  transition: background-color .6s ease-in-out;
}

.effect-glass {
  background: rgba(255, 255, 255, 0.1);
  // border-radius: 16px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(25px) !important;
}

@each $size, $value in $grid-breakpoints {
  @media (min-width: $value) {

    // Container
    .container {
      --container-max-width: #{map-get($container-max-widths, $size)};
    }

    // Column
    .col-#{$size}-bg-spill {
      --bg-width: calc(100% + ((100vw - var(--container-max-width)) / 2));
      background-size: 0 !important;
      position: relative;

      * {
        position: relative;
      }

      &:before {
        background-image: inherit;
        background-size: cover;
        background-position: 50% 0;
      }

      &:before {
        content: "";
        position: absolute;
        top: 0;
        inset-inline-start: initial;
        inset-inline-end: 0;
        height: 100%;
        width: var(--bg-width);
      }

      // Last column
      &:last-child:before {
        inset-inline-start: 0;
        inset-inline-end: initial;
      }
    }
  }
}